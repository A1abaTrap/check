<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Random Number & Number Reader</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(135deg, #4facfe, #00f2fe);
      text-align: center;
      padding: 0;
      margin: 0;
      color: #000;
    }
    .tabs {
      display: flex;
      justify-content: center;
      margin-top: 20px;
    }
    .tab {
      padding: 10px 20px;
      cursor: pointer;
      border-bottom: 2px solid transparent;
      font-weight: bold;
      color: #fff;
      transition: border-color 0.3s;
    }
    .tab.active {
      border-color: #ffcc00;
    }
    .container {
      max-width: 400px;
      margin: 20px auto;
      padding: 20px;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
      display: none;
    }
    .container.active {
      display: block;
    }
    input, button {
      width: 90%;
      padding: 15px;
      margin: 10px 0;
      font-size: 16px;
      border: none;
      border-radius: 5px;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    }
    input {
      background: rgba(255, 255, 255, 0.9);
      color: #333;
    }
    button {
      background: #007bff;
      color: #fff;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.3s;
    }
    button:hover {
      background: #0056b3;
    }
    label {
      font-size: 14px;
      display: block;
      margin: 10px 0;
    }
    #result {
      font-size: 48px;
      font-weight: bold;
      margin-top: 20px;
      color: #ffcc00;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
    }
    .reader {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 30px;
      align-items: center;
    }
    .box {
      width: 100px;
      height: 140px;
      border: 2px solid black;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 28px;
      font-weight: bold;
      border-radius: 10px;
      transition: transform 0.5s ease, background-color 0.5s ease;
    }
    .box.previous {
      background-color: #e0e0e0;
      color: gray;
      transform: scale(0.8);
    }
    .box.current {
      background-color: #ffcc00;
      color: black;
      transform: scale(1.2);
    }
    .box.next {
      background-color: #cce7ff;
      color: black;
      transform: scale(0.9);
    }
    .buttons {
      display: flex;
      justify-content: center;
      gap: 15px;
    }
  </style>
</head>
<body>
  <div class="tabs">
    <div class="tab active" data-tab="random-tab">Random Number</div>
    <div class="tab" data-tab="reader-tab">Number Reader</div>
  </div>

  <!-- Random Number Generator Tab -->
  <div class="container active" id="random-tab">
    <h2>üé≤ Random Number Generator üé≤</h2>
    <input type="number" id="startNumber" placeholder="Enter Start Number">
    <input type="number" id="endNumber" placeholder="Enter End Number">
    <label>
      Speed: <span id="randomSpeedValue">500</span> ms
    </label>
    <input type="range" id="randomSpeedControl" min="100" max="1000" value="500" step="50">
    <label>
      <input type="checkbox" id="toggleVoice" checked=""> Enable Voice
    </label>
    <button id="generateBtn">Start Randomizing</button>
    <div id="result">Your random number will appear here!</div>
  </div>

  <!-- Number Reader Tab -->
  <div class="container" id="reader-tab">
    <h1>üîä Number Reader üîä</h1>
    <input type="text" id="numberInput" placeholder="Enter numbers (comma-separated)" />
    <div>
      <label>Speed: <span id="speedValue">1</span></label>
      <input type="range" id="speedControl" min="0.5" max="2" step="0.1" value="1">
    </div>
    <div class="buttons">
      <button id="startPauseBtn">Start</button>
      <button id="stopBtn" disabled>Stop</button>
    </div>
    <div class="reader">
      <div class="box previous" id="previousNumber"></div>
      <div class="box current" id="currentNumber"></div>
      <div class="box next" id="nextNumber"></div>
    </div>
  </div>

  <script>
    // Tab functionality
    const tabs = document.querySelectorAll('.tab');
    const containers = document.querySelectorAll('.container');

    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        tabs.forEach(t => t.classList.remove('active'));
        containers.forEach(c => c.classList.remove('active'));
        tab.classList.add('active');
        document.getElementById(tab.dataset.tab).classList.add('active');
      });
    });

    // Random Number Generator
    const startNumber = document.getElementById("startNumber");
    const endNumber = document.getElementById("endNumber");
    const generateBtn = document.getElementById("generateBtn");
    const randomSpeedControl = document.getElementById("randomSpeedControl");
    const randomSpeedValue = document.getElementById("randomSpeedValue");
    const toggleVoice = document.getElementById("toggleVoice");
    const result = document.getElementById("result");

    let intervalId = null;
    let isSpeaking = false;

    randomSpeedControl.addEventListener("input", () => {
      randomSpeedValue.textContent = randomSpeedControl.value;
      if (intervalId) {
        clearInterval(intervalId);
        startRandomizing();
      }
    });

    generateBtn.addEventListener("click", () => {
      if (intervalId) {
        clearInterval(intervalId);
        intervalId = null;
        generateBtn.textContent = "Start Randomizing";
      } else {
        startRandomizing();
        generateBtn.textContent = "Stop Randomizing";
      }
    });

    function startRandomizing() {
      const start = parseInt(startNumber.value, 10);
      const end = parseInt(endNumber.value, 10);

      if (isNaN(start) || isNaN(end) || start >= end) {
        result.textContent = "Please enter valid numbers!";
        return;
      }

      intervalId = setInterval(async () => {
        if (!isSpeaking) {
          const random = Math.floor(Math.random() * (end - start + 1)) + start;
          result.textContent = random;

          if (toggleVoice.checked) {
            await speakNumber(random, 1000 / parseInt(randomSpeedControl.value));
          }
        }
      }, parseInt(randomSpeedControl.value, 10));
    }

    // Number Reader
    const numberInput = document.getElementById("numberInput");
    const startPauseBtn = document.getElementById("startPauseBtn");
    const stopBtn = document.getElementById("stopBtn");
    const speedControl = document.getElementById("speedControl");
    const speedValue = document.getElementById("speedValue");
    const previousNumberDiv = document.getElementById("previousNumber");
    const currentNumberDiv = document.getElementById("currentNumber");
    const nextNumberDiv = document.getElementById("nextNumber");

    let numbers = [];
    let currentIndex = 0;
    let isReading = false;
    let isPaused = false;
    let readInterval;

    speedControl.addEventListener("input", () => {
      speedValue.textContent = speedControl.value;
    });

    startPauseBtn.addEventListener("click", () => {
      if (!isReading) {
        if (numbers.length === 0) {
          const input = numberInput.value.trim();
          if (!input) {
            alert("Please enter numbers!");
            return;
          }
          numbers = input.split(",").map(num => num.trim());
        }
        startReading();
      } else if (isPaused) {
        resumeReading();
      } else {
        pauseReading();
      }
    });

    stopBtn.addEventListener("click", stopReading);

    function updateUI() {
      const previousNumber = numbers[currentIndex - 1] || "";
      const currentNumber = numbers[currentIndex] || "";
      const nextNumber = numbers[currentIndex + 1] || "";

      previousNumberDiv.textContent = previousNumber;
      currentNumberDiv.textContent = currentNumber;
      nextNumberDiv.textContent = nextNumber;
    }

    function startReading() {
      isReading = true;
      isPaused = false;
      startPauseBtn.textContent = "Pause";
      stopBtn.disabled = false;

      updateUI();
      readNextNumber();
    }

    function readNextNumber() {
      if (currentIndex < numbers.length) {
        const currentNumber = numbers[currentIndex];
        speakNumber(currentNumber, parseFloat(speedControl.value)).then(() => {
          currentIndex++;
          updateUI();
          if (currentIndex < numbers.length) {
            readNextNumber();  // Read the next number only after the current one finishes
          } else {
            stopReading();
          }
        });
      }
    }

    function pauseReading() {
      isPaused = true;
      clearInterval(readInterval);
      startPauseBtn.textContent = "Resume";
    }

    function resumeReading() {
      isPaused = false;
      startPauseBtn.textContent = "Pause";
      readNextNumber();  // Resume reading the next number
    }

    function stopReading() {
      isReading = false;
      isPaused = false;
      currentIndex = 0;
      numbers = [];
      updateUI();

      startPauseBtn.textContent = "Start";
      stopBtn.disabled = true;
    }

    function speakNumber(number, speed) {
      return new Promise(resolve => {
        const utterance = new SpeechSynthesisUtterance(number.toString());
        utterance.rate = speed;

        // Khi gi·ªçng ƒë·ªçc k·∫øt th√∫c, chuy·ªÉn sang s·ªë ti·∫øp theo
        utterance.onend = () => {
          resolve();  // Gi·ªçng ƒë·ªçc ƒë√£ ho√†n th√†nh, ti·∫øp t·ª•c
        };

        window.speechSynthesis.speak(utterance);
      });
    }
  </script>
</body>
</html>
